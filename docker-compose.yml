version: '3'
services:

    right_client:
        image: telegraf:1.19.3
        container_name: right_client
        volumes:
            - "${MQTT_DEMO_PATH}/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf"
            - "${MQTT_DEMO_PATH}/telegraf/topic_parse.star:/etc/telegraf/topic_parse.star"
        environment:
            - INFLUX_HOST=${INFLUX_HOST}
            - INFLUX_ORG=${INFLUX_ORG}
            - INFLUX_TOKEN=${INFLUX_TOKEN}
        depends_on: 
            - broker
        deploy:
            restart_policy:
                condition: on-failure
                delay: 5s

    broker:
        image: hivemq/hivemq4
        container_name: broker
        ports:
            - "1883:1883"
            - "8080:8080"
        # healthcheck:
        #     test: ["CMD", "curl", "-f", "http://localhost:1883", "||", "exit", "52"]
        #     interval: 5s
        #     timeout: 5s
        #     retries: 5
    
    influxd:
        image: influxdb:2.0.7
        container_name: influxd
        volumes:
            - "${MQTT_DEMO_PATH}/influxdb/data:/var/lib/.influxdbv2"
        environment:
            - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USERNAME}
            - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
            - DOCKER_INFLUXDB_INIT_ORG=${INFLUX_ORG}
            - DOCKER_INFLUXDB_INIT_BUCKET=mqtt
            - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
        ports:
            - "8086:8086"

    influx_cli:
        image: influxdb:2.0.7
        container_name: influx_cli
        environment:
            - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUX_USERNAME}
            - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}
            - DOCKER_INFLUXDB_INIT_ORG=${INFLUX_ORG}
            - DOCKER_INFLUXDB_INIT_BUCKET=mqtt
            - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUX_TOKEN}
        deploy:
            restart_policy:
                condition: on-failure
                delay: 5s
        depends_on:
            - influxd
        volumes:
            - "${MQTT_DEMO_PATH}/average_temp_5m.flux:/average_temp_5m.flux"
            - "${MQTT_DEMO_PATH}/cli_entrypoint.sh:/cli_entrypoint.sh"
        entrypoint: /cli_entrypoint.sh

    # nodered:
    #     image: nodered/node-red
    #     container_name: nodered
    #     depends_on: 
    #         - influxd
    #         - broker
    #     ports:
    #         - "1880:1880"
    #     volumes:
    #         - "${MQTT_DEMO_PATH}/node-red.json:/data/mqtt-demo.json"
    #         - "${HOME}/.node-red:/data"

    # api:
    #     build:
    #         context: ./client
    #         dockerfile: Dockerfile
    #     # image: python-docker
    #     container_name: api
    #     ports:
    #         - "8000:8000"
    #     environment:
    #         - INFLUX_HOST=${DOCKER_INFLUX_HOST}
    #         - INFLUX_TOKEN=${INFLUX_TOKEN}
    #         - INFLUX_BUCKET=${INFLUX_BUCKET}
    #         - INFLUX_ORG=${INFLUX_ORG}
    #         - FLUX_QUERIES_PATH=/mqtt_api/flux_queries

    py_publisher:
        build:
            context: ./client
            dockerfile: Dockerfile
        # image: python-test
        stdin_open: true
        tty: true
        deploy:
            mode: replicated
            replicas: 10
            # restart_policy:
            #     condition: on-failure
            #     delay: 2s
        depends_on: 
            - broker
        command: ["/mqtt_client.py", "--interval", ".1", "--format", "json"]

    grafana:
        container_name: grafana
        build: ./grafana
        ports:
            - "3000:3000"
        depends_on:
            - broker
            - influxd
        volumes:
            - "${MQTT_DEMO_PATH}/grafana/grafana.ini:/etc/grafana/grafana.ini"